// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Context;

namespace WebApp.Migrations
{
    [DbContext(typeof(GradeDbContext))]
    [Migration("20220607080356_Sqlite")]
    partial class Sqlite
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Chinese_PRC_CI_AS")
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("WebApp.Models.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Id18")
                        .IsFixedLength(true);

                    b.Property<string>("MajorId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("MajorId18")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name18")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.ToTable("Class18");
                });

            modelBuilder.Entity("WebApp.Models.ClassCourse", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("CourseId18")
                        .IsFixedLength(true);

                    b.Property<string>("ClassId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("ClassId18")
                        .IsFixedLength(true);

                    b.HasKey("CourseId", "ClassId");

                    b.HasIndex(new[] { "ClassId", "CourseId" }, "IX_ClassCourse18")
                        .IsUnique();

                    b.ToTable("ClassCourse18");
                });

            modelBuilder.Entity("WebApp.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Id18")
                        .IsFixedLength(true);

                    b.Property<int>("Credit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Credit18");

                    b.Property<string>("ExamMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("ExamMethod18")
                        .IsFixedLength(true);

                    b.Property<int>("Hours")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Hours18");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name18")
                        .IsFixedLength(true);

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Semester18")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Course18");
                });

            modelBuilder.Entity("WebApp.Models.Major", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Id18")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name18")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Major18");
                });

            modelBuilder.Entity("WebApp.Models.Student", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId18")
                        .IsFixedLength(true);

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("ClassId18")
                        .IsFixedLength(true);

                    b.Property<int?>("Credit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Credit18")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SourcePlace")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("SourcePlace18")
                        .IsFixedLength(true);

                    b.HasKey("UserId")
                        .HasName("PK_Student18_1");

                    b.HasIndex("ClassId");

                    b.ToTable("Student18");
                });

            modelBuilder.Entity("WebApp.Models.StudentCourse", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("CourseId18")
                        .IsFixedLength(true);

                    b.Property<string>("StudentId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("StudentId18")
                        .IsFixedLength(true);

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Score18");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex(new[] { "StudentId", "CourseId" }, "IX_StudentCourse18")
                        .IsUnique();

                    b.ToTable("StudentCourse18");
                });

            modelBuilder.Entity("WebApp.Models.StudentFull", b =>
                {
                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.Property<int?>("Credit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.Property<string>("MajorId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.Property<string>("SourcePlace")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.ToView("StudentFull");
                });

            modelBuilder.Entity("WebApp.Models.Teacher", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId18")
                        .IsFixedLength(true);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Telephone18")
                        .IsFixedLength(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Title18")
                        .IsFixedLength(true);

                    b.HasKey("UserId");

                    b.ToTable("Teacher18");
                });

            modelBuilder.Entity("WebApp.Models.TeacherCourse", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("CourseId18")
                        .IsFixedLength(true);

                    b.Property<string>("TeacherId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("TeacherId18")
                        .IsFixedLength(true);

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex(new[] { "TeacherId", "CourseId" }, "IX_TeacherCourse18")
                        .IsUnique();

                    b.ToTable("TeacherCourse18");
                });

            modelBuilder.Entity("WebApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Id18")
                        .IsFixedLength(true);

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Age18");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Gender18")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name18")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("Password18")
                        .IsFixedLength(true);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("Role18")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("User18");
                });

            modelBuilder.Entity("WebApp.Models.Class", b =>
                {
                    b.HasOne("WebApp.Models.Major", "MajorNavigation")
                        .WithMany("Classes")
                        .HasForeignKey("MajorId")
                        .HasConstraintName("FK_Class18_Major18")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorNavigation");
                });

            modelBuilder.Entity("WebApp.Models.ClassCourse", b =>
                {
                    b.HasOne("WebApp.Models.Class", "ClassNavigation")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassCourse18_Class18")
                        .IsRequired();

                    b.HasOne("WebApp.Models.Course", "CourseNavigation")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_ClassCourse18_Course18")
                        .IsRequired();

                    b.Navigation("ClassNavigation");

                    b.Navigation("CourseNavigation");
                });

            modelBuilder.Entity("WebApp.Models.Student", b =>
                {
                    b.HasOne("WebApp.Models.Class", "ClassNavigation")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Student18_Class18")
                        .IsRequired();

                    b.HasOne("WebApp.Models.User", "UserNavigation")
                        .WithOne("Student")
                        .HasForeignKey("WebApp.Models.Student", "UserId")
                        .HasConstraintName("FK_Student18_User18")
                        .IsRequired();

                    b.Navigation("ClassNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("WebApp.Models.StudentCourse", b =>
                {
                    b.HasOne("WebApp.Models.Course", "CourseNavigation")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_StudentCourse18_Course18")
                        .IsRequired();

                    b.HasOne("WebApp.Models.Student", "StudentNavigation")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentCourse18_Student18")
                        .IsRequired();

                    b.Navigation("CourseNavigation");

                    b.Navigation("StudentNavigation");
                });

            modelBuilder.Entity("WebApp.Models.Teacher", b =>
                {
                    b.HasOne("WebApp.Models.User", "UserNavigation")
                        .WithOne("Teacher")
                        .HasForeignKey("WebApp.Models.Teacher", "UserId")
                        .HasConstraintName("FK_Teacher18_User18")
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("WebApp.Models.TeacherCourse", b =>
                {
                    b.HasOne("WebApp.Models.Course", "CourseNavigation")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_TeacherCourse18_Course18")
                        .IsRequired();

                    b.HasOne("WebApp.Models.Teacher", "TeacherNavigation")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TeacherCourse18_Teacher18")
                        .IsRequired();

                    b.Navigation("CourseNavigation");

                    b.Navigation("TeacherNavigation");
                });

            modelBuilder.Entity("WebApp.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApp.Models.Major", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("WebApp.Models.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
